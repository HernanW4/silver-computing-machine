name: CI/CD Pipeline

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  REGISTRY: "personal-registryhw4"
  IMAGE_NAME: "python_website"

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo 
        uses: actions/checkout@v2
        
      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry (short-lived)
        run: doctl registry login --expiry-seconds 600
      
      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          run: |
            docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
        
<<<<<<< Updated upstream
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    environment: master
    
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.4
        with:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          KEY: ${{ secrets.SSH_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
          ENVS: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to doctl 
            doctl registry login -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} --expiry-seconds 600
            # Login to registry
            sudo docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            sudo docker stop $(echo $IMAGE_NAME)
            # Remove old container
            sudo docker rm $(echo $IMAGE_NAME)
            # Run a new container from a new image
            sudo docker run -d \
            --restart always \
            --name $(echo $IMAGE_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

=======
            ##deploy:
            #    runs-on: ubuntu-latest
            #    needs: build_and_push
            #    environment: master
            #    
            #    steps:
            #      - name: Deploy to Digital Ocean droplet via SSH action
            #        uses: appleboy/ssh-action@v0.1.4
            #        with:
            #          HOST: ${{ secrets.HOST }}
            #          USERNAME: ${{ secrets.USERNAME }}
            #          KEY: ${{ secrets.SSH_KEY }}
            #          PASSPHRASE: ${{ secrets.PASSPHRASE }}
            #          ENVS: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
            #          script: |
            #            # Login to registry
            #            sudo docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            #            # Stop running container
            #            sudo docker stop $(echo $IMAGE_NAME)
            #            # Remove old container
            #            sudo docker rm $(echo $IMAGE_NAME)
            #            # Run a new container from a new image
            #            sudo docker run -d \
            #            --restart always \
            #            --name $(echo $IMAGE_NAME) \
            #            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
            #
>>>>>>> Stashed changes
